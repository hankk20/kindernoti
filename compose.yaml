version: "3"
services:
  # Spring Cloud
  api-gateway:
    container_name: api-gateway
    build: spring-cloud/api-gateway
    restart: always
    ports:
      - "8889:80"
    environment:
      - SERVER_PORT=80
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_USERNAME=${CONFIG_SERVER_USR}
      - SPRING_CLOUD_CONFIG_PASSWORD=${CONFIG_SERVER_PWD}
    depends_on:
      - config-server
    env_file:
      - .env
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost/actuator/health || exit 1
  config-server:
    container_name: config-server
    build: spring-cloud/config-server
    hostname: config-server
    restart: on-failure
    ports:
      - "8888:80"
    environment:
      - TZ=Asia/Seoul
      - SERVER_PORT=80
      - SPRING_PROFILES_ACTIVE=native,docker
      - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY}
      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    env_file:
      - .env
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost/actuator/health || exit 1
  eureka-server:
    container_name: eureka-server
    build: spring-cloud/eureka-server
    restart: on-failure
    ports:
      - "8761:80"
    environment:
      - SERVER_PORT=80
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_USERNAME=${CONFIG_SERVER_USR}
      - SPRING_CLOUD_CONFIG_PASSWORD=${CONFIG_SERVER_PWD}
    depends_on:
      config-server:
        condition: service_healthy
    env_file:
      - .env
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost/actuator/health || exit 1
# Service
  institution:
    container_name: institution
    build: services/institution
    restart: on-failure
    ports:
      - "8082:80"
    environment:
      - SERVER_PORT=80
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_USERNAME=${CONFIG_SERVER_USR}
      - SPRING_CLOUD_CONFIG_PASSWORD=${CONFIG_SERVER_PWD}
    depends_on:
      - config-server
      - eureka-server
    env_file:
      - .env
  member:
    container_name: member
    build: services/member
    restart: on-failure
    ports:
      - "8080:80"
      - "5005:5005"
    environment:
      - SERVER_PORT=80
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_USERNAME=${CONFIG_SERVER_USR}
      - SPRING_CLOUD_CONFIG_PASSWORD=${CONFIG_SERVER_PWD}
    depends_on:
      - config-server
      - eureka-server
    env_file:
      - .env
  # Infra
  nginx:
    container_name: nginx
    image: 'nginx:1.25.1-alpine'
    restart: on-failure
    volumes:
      - ./container/nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api-gateway
      - keycloak
  mongodb:
    container_name: mongodb
    hostname: mongodb
    env_file:
      - ./container/env/mong.env
    build:
      context: ./container/
      dockerfile: Dockerfile_mongodb
    command: --replSet rs0 --timeStampFormat iso8601-local --auth --keyFile /mongodb.key --bind_ip localhost,mongodb
    volumes:
      - ./container/mongo:/docker-entrypoint-initdb.d:ro
      - /local/data/mongo:/data/db
    ports:
      - '27020:27017'
    healthcheck:
      test: |
        test $$(mongosh --quiet -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --eval "try { rs.initiate().ok } catch (_) { rs.status().ok }") -eq 1
      interval: 10s
      start_period: 30s

  kafka:
    container_name: kafka
    hostname: kafka
    image: "bitnami/kafka:3.6.0"
    ports:
      - "9092:9092"
      - "9094:9094"
      - "9095:9095"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - TZ=Asia/Seoul
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_TLS_CLIENT_AUTH=none
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://kafka:9094,DOCKER://kafka:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092,EXTERNAL://localhost:9094,DOCKER://kafka:9095
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT
  keycloak:
    container_name: keycloak
    hostname: auth.kindernoti.co.kr
    image: "quay.io/keycloak/keycloak:23.0.4"
    ports:
      - "9999:80"
    volumes:
      - ./container/keycloak/conf:/opt/keycloak/conf
    command: ["start-dev", "--http-port=80", "--log-level=DEBUG"]
    depends_on:
      - keycloak-db
  keycloak-db:
    image: postgres:16.1-alpine3.19
    container_name: keycloak-db
    hostname: keycloak-db
    ports:
      - "5432:5432"
    volumes:
      - /local/data/keycloak-db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
  redis:
    container_name: redis
    hostname: redis-server
    image: redis:7.2.4-alpine
    ports:
      - "6379:6379"
    volumes:
      - /local/redis/data:/data
      - ./container/redis:/usr/local/etc/redis
    command:
      - redis-server
      - /usr/local/etc/redis/redis.conf
  swagger:
    container_name: swagger
    hostname: swagger
    image: swaggerapi/swagger-ui:v5.11.2
    ports:
      - "9000:80"
    # volumes:
      # - ./container/swagger/swagger-config.yaml:/usr/share/nginx/html/swagger-config.yaml
    environment:
      PORT: 80
      BASE_URL: /swagger
      URLS: "[{ url: \"http://kindernoti.co.kr/member-service/docs/openapi3.yaml\", name: \"Member Service\" },
                        { url: \"http://kindernoti.co.kr/institution-service/docs/openapi3.yaml\", name: \"Institution Service\" },
                    ]"
volumes:
  kafka_data:
    driver: local
